Coef.R2<-Coef.R^2
#Grafico Solicitado
plot(datos, pch=16, col="red")
plot(X,Y.modelo, pc=16, col="blue", type="l")
return(list(Bo,B1,Y.modelo,Residuo,Coef.R,Coef.R2))
}
ejemplo<-ModeloLineal(mtcars_data)
ModeloLineal<- function(datos)
{
X<-datos[,1]
Y<-datos[,2]
#Calculo de la media de Y
Y.mean<-mean(Y)
#Calculo de la media de X
X.mean<-mean(X)
#Calculo de B1
sumaTerminos<-sum((X-X.mean)*(Y-Y.mean))
sumaCuadrada<-sum((X-X.mean)^2)
B1<-sumaTerminos/sumaCuadrada
#Calculo de Bo
Bo<-Y.mean-(B1*X.mean)
#Obtener Y del modelo
Y.modelo<-Bo+(B1*X)
#Calcular residuos
Residuo<-Y-Y.modelo
#Calculo de R
Coef.R<-cov(X,Y)/(sd(X)*sd(Y))
#Calculo de R Cuadrado
Coef.R2<-Coef.R^2
#Grafico Solicitado
plot(datos, pch=16, col="red") +
plot(X,Y.modelo, pc=16, col="blue", type="l")
return(list(Bo,B1,Y.modelo,Residuo,Coef.R,Coef.R2))
}
ejemplo<-ModeloLineal(mtcars_data)
ModeloLineal<- function(datos)
{
X<-datos[,1]
Y<-datos[,2]
#Calculo de la media de Y
Y.mean<-mean(Y)
#Calculo de la media de X
X.mean<-mean(X)
#Calculo de B1
sumaTerminos<-sum((X-X.mean)*(Y-Y.mean))
sumaCuadrada<-sum((X-X.mean)^2)
B1<-sumaTerminos/sumaCuadrada
#Calculo de Bo
Bo<-Y.mean-(B1*X.mean)
#Obtener Y del modelo
Y.modelo<-Bo+(B1*X)
#Calcular residuos
Residuo<-Y-Y.modelo
#Calculo de R
Coef.R<-cov(X,Y)/(sd(X)*sd(Y))
#Calculo de R Cuadrado
Coef.R2<-Coef.R^2
#Grafico Solicitado
plot(datos, pch=16, col="red")
points(X,Y.modelo, pc=16, col="blue", type="l")
return(list(Bo,B1,Y.modelo,Residuo,Coef.R,Coef.R2))
}
ejemplo<-ModeloLineal(mtcars_data)
ModeloLineal<- function(datos)
{
X<-datos[,1]
Y<-datos[,2]
#Calculo de la media de Y
Y.mean<-mean(Y)
#Calculo de la media de X
X.mean<-mean(X)
#Calculo de B1
sumaTerminos<-sum((X-X.mean)*(Y-Y.mean))
sumaCuadrada<-sum((X-X.mean)^2)
B1<-sumaTerminos/sumaCuadrada
#Calculo de Bo
Bo<-Y.mean-(B1*X.mean)
#Obtener Y del modelo
Y.modelo<-Bo+(B1*X)
#Calcular residuos
Residuo<-Y-Y.modelo
#Calculo de R
Coef.R<-cov(X,Y)/(sd(X)*sd(Y))
#Calculo de R Cuadrado
Coef.R2<-Coef.R^2
#Grafico Solicitado
plot(datos, pch=16, col="red")
line(X,Y.modelo, pc=16, col="blue")
return(list(Bo,B1,Y.modelo,Residuo,Coef.R,Coef.R2))
}
ejemplo<-ModeloLineal(mtcars_data)
ModeloLineal<- function(datos)
{
X<-datos[,1]
Y<-datos[,2]
#Calculo de la media de Y
Y.mean<-mean(Y)
#Calculo de la media de X
X.mean<-mean(X)
#Calculo de B1
sumaTerminos<-sum((X-X.mean)*(Y-Y.mean))
sumaCuadrada<-sum((X-X.mean)^2)
B1<-sumaTerminos/sumaCuadrada
#Calculo de Bo
Bo<-Y.mean-(B1*X.mean)
#Obtener Y del modelo
Y.modelo<-Bo+(B1*X)
#Calcular residuos
Residuo<-Y-Y.modelo
#Calculo de R
Coef.R<-cov(X,Y)/(sd(X)*sd(Y))
#Calculo de R Cuadrado
Coef.R2<-Coef.R^2
#Grafico Solicitado
plot(datos, pch=16, col="red")
points(X,Y.modelo, pc=16, col="blue")
return(list(Bo,B1,Y.modelo,Residuo,Coef.R,Coef.R2))
}
ejemplo<-ModeloLineal(mtcars_data)
ModeloLineal<- function(datos)
{
X<-datos[,1]
Y<-datos[,2]
#Calculo de la media de Y
Y.mean<-mean(Y)
#Calculo de la media de X
X.mean<-mean(X)
#Calculo de B1
sumaTerminos<-sum((X-X.mean)*(Y-Y.mean))
sumaCuadrada<-sum((X-X.mean)^2)
B1<-sumaTerminos/sumaCuadrada
#Calculo de Bo
Bo<-Y.mean-(B1*X.mean)
#Obtener Y del modelo
Y.modelo<-Bo+(B1*X)
#Calcular residuos
Residuo<-Y-Y.modelo
#Calculo de R
Coef.R<-cov(X,Y)/(sd(X)*sd(Y))
#Calculo de R Cuadrado
Coef.R2<-Coef.R^2
#Grafico Solicitado
plot(datos, pch=16, col="red")
points(X,Y.modelo, pc=16, col="blue", type = "l")
return(list(Bo,B1,Y.modelo,Residuo,Coef.R,Coef.R2))
}
ejemplo<-ModeloLineal(mtcars_data)
ejemplo
ModeloLineal<- function(datos)
{
X<-datos[,1]
Y<-datos[,2]
#Calculo de la media de Y
Y.mean<-mean(Y)
#Calculo de la media de X
X.mean<-mean(X)
#Calculo de B1
sumaTerminos<-sum((X-X.mean)*(Y-Y.mean))
sumaCuadrada<-sum((X-X.mean)^2)
B1<-sumaTerminos/sumaCuadrada
#Calculo de Bo
Bo<-Y.mean-(B1*X.mean)
ValoresB<-c(Bo,B1)
#Obtener Y del modelo
Y.modelo<-Bo+(B1*X)
#Calcular residuos
Residuo<-Y-Y.modelo
#Calculo de R
Coef.R<-cov(X,Y)/(sd(X)*sd(Y))
#Calculo de R Cuadrado
Coef.R2<-Coef.R^2
#Grafico Solicitado
plot(datos, pch=16, col="red")
points(X,Y.modelo, pc=16, col="blue", type = "l")
Salida<-list(ValoresB,Residuo,Coef.R,Coef.R2)
return(Salida)
}
ejemplo<-ModeloLineal(mtcars_data)
ejemplo
ModeloLineal<- function(datos)
{
X<-datos[,1]
Y<-datos[,2]
#Calculo de la media de Y
Y.mean<-mean(Y)
#Calculo de la media de X
X.mean<-mean(X)
#Calculo de B1
sumaTerminos<-sum((X-X.mean)*(Y-Y.mean))
sumaCuadrada<-sum((X-X.mean)^2)
B1<-sumaTerminos/sumaCuadrada
#Calculo de Bo
Bo<-Y.mean-(B1*X.mean)
ValoresB<-c(Bo,B1)
#Obtener Y del modelo
Y.modelo<-Bo+(B1*X)
#Calcular residuos
Residuo<-Y-Y.modelo
#Calculo de R
Coef.R<-cov(X,Y)/(sd(X)*sd(Y))
#Calculo de R Cuadrado
Coef.R2<-Coef.R^2
#Grafico Solicitado
plot(datos, pch=16, col="red")
points(X,Y.modelo, pc=16, col="blue", type = "l")
Salida<-list(ValoresB,Coef.R2,Coef.R,Residuo)
return(Salida)
}
ejemplo<-ModeloLineal(mtcars_data)
ejemplo
summary(lm_1)
ModeloLineal<- function(datos)
{
X<-datos[,1]
Y<-datos[,2]
#Calculo de la media de Y
Y.mean<-mean(Y)
#Calculo de la media de X
X.mean<-mean(X)
#Calculo de B1
sumaTerminos<-sum((X-X.mean)*(Y-Y.mean))
sumaCuadrada<-sum((X-X.mean)^2)
B1<-sumaTerminos/sumaCuadrada
#Calculo de Bo
Bo<-Y.mean-(B1*X.mean)
ValoresB<-c(Bo,B1)
#Obtener Y del modelo
Y.modelo<-Bo+(B1*X)
#Calcular residuos
Residuo<-Y-Y.modelo
#Calculo de R
Coef.R<-cov(X,Y)/(sd(X)*sd(Y))
#Calculo de R Cuadrado
Coef.R2<-Coef.R^2
#Grafico Solicitado
plot(datos, pch=16, col="red")
points(X,Y.modelo, pc=16, col="blue", type = "l")
Salida<-list(ValoresB,Coef.R2,Coef.R,Residuo)
return(Salida)
}
ejemplo<-ModeloLineal(mtcars_data)
ejemplo
lm_1<-lm(mpg ~ disp, data=mtcars_data)
summary(lm_1)
d.Admissions<-read.csv("Datos Econometria/Admission_Predict_Ver1.1.csv")
d.Admissions
d.Admissions<-read.csv("Datos Econometria/Admission_Predict_Ver1.1.csv")
#d.Admissions<-read.csv("Datos Econometria/Admission_Predict_Ver1.1.csv")
d.Admissions<-read.csv("Admission_Predict_Ver1.1.csv")
d.Admissions
d.Admissions<-read.csv("Datos Econometria/Admission_Predict_Ver1.1.csv")
d.Admissions<-read.csv("Datos Econometria/Admission_Predict_Ver1.1.csv")
d.Admissions
library(readr)
d.Admissions<-read.csv("Datos Econometria/Admission_Predict_Ver1.1.csv")
d.Admissions<-read_csv("Datos Econometria/Admission_Predict_Ver1.1.csv")
d.Admissions<-read_csv("Admission_Predict_Ver1.1.csv")
d.Admissions<-read_csv("Admission_Predict_Ver1.1.csv")
d.Admissions
summary(d.Admissions)
#Gree Score
d.Admissions %>%
ggplot(aes(x=`GRE Score`, y=..density..))+geom_density(color="blue", fill="cyan")+
xlab("GRE SCORE")+
ylab("Densidad")+
ggtitle("Densidad de GRE SCORE")+
theme_classic()
#Densidad TOEFL Score
d.Admissions %>%
ggplot(aes(x=`TOEFL Score`, y=..density..))+geom_density(color="blue", fill="cyan")+
xlab("TOEFL Score")+
ylab("Densidad")+
ggtitle("Densidad de TOEFL Score")+
theme_classic()
#Densidad CGPA
d.Admissions %>%
ggplot(aes(x=CGPA, y=..density..))+geom_density(color="blue", fill="cyan")+
xlab("CGPA")+
ylab("Densidad")+
ggtitle("Densidad de CGPA")+
theme_classic()
#Densidad Chance of Admit
d.Admissions %>%
ggplot(aes(x=`Chance of Admit`, y=..density..))+geom_density(color="blue", fill="cyan")+
xlab("Chance of Admit")+
ylab("Densidad")+
ggtitle("Densidad de Chance of Admit")+
theme_classic()
View(d.Admissions)
View(d.Admissions)
#3) Grafica de correlacion entre las variables anteriores
corrplot(cor(d.Admissions[ ,2:3]),
method="number",
type="upper")
library(corrplot)
#3) Grafica de correlacion entre las variables anteriores
corrplot(cor(d.Admissions[ ,2:3]),
method="number",
type="upper")
cor(mtcars_data)
summary(lm_1)
#3) Grafica de correlacion entre las variables anteriores
corrplot(cor(d.Admissions[ ,c("GRE Score","TOEFL Score")]),
method="number",
type="upper")
#3) Grafica de correlacion entre las variables anteriores
corrplot(cor(d.Admissions[ ,c("GRE Score","TOEFL Score","CGPA","Chance of Admit")]),
method="number",
type="upper")
#Modelo GRE Score
d.Admissions %>%
ggplot(aes(x=`GRE Score`, y=`Chance of Admit`))+
geom_point(col="blue")+
theme_gray()
#Modelo TOEFL Score
d.Admissions %>%
ggplot(aes(x=`TOEFL Score`, y=`Chance of Admit`))+
geom_point(col="blue")+
theme_gray()
#Modelo CGPA
d.Admissions %>%
ggplot(aes(x=CGPA, y=`Chance of Admit`))+
geom_point(col="blue")+
theme_gray()
lm.GRE<-lm(`Chance of Admit` ~ `GRE Score`, data=d.Admissions)
summary(lm.GRE)
lm.TOEFL<-lm(`Chance of Admit` ~ `TOEFL Score`, data=d.Admissions)
summary(lm.TOEFL)
lm.CGPA<-lm(CGPA ~ `GRE Score`, data=d.Admissions)
summary(lm.CGPA)
plot(d.Admissions, pch=16, col="red")
points(xaxis,
predict(lm.GRE,data.frame(disp=xaxis)),
type="l",lwd=2)
#7) Scatter plot con el grafico del modelo lineal
d.Admissions %>%
ggplot(aes(x=`GRE Score`, y=`Chance of Admit`))+
geom_point(col="blue")+
geom_abline(slope= lm.GRE$residuals[1], intercept= lm.GRE$residuals[1], color="red", size=1)+
theme_gray()
d.Admissions %>%
ggplot(aes(x=`GRE Score`, y=`Chance of Admit`))+
geom_point(col="blue")+
geom_abline(slope= lm.GRE$residuals[1], intercept= lm.GRE$residuals[1], color="red", size=1)+
theme_gray()
#7) Scatter plot con el grafico del modelo lineal
d.Admissions %>%
ggplot(aes(x=`GRE Score`, y=`Chance of Admit`))+
geom_point(col="blue")+
geom_abline(slope= lm.GRE$coefficients[1], intercept= lm.GRE$coefficients[1], color="red", size=1)+
theme_gray()
#7) Scatter plot con el grafico del modelo lineal
d.Admissions %>%
ggplot(aes(x=`GRE Score`, y=`Chance of Admit`))+
geom_point(col="blue")+
geom_abline(slope= lm.GRE$coefficients[1], intercept= lm.GRE$coefficients[1], color="red", size=1)+
theme_gray()
#7) Scatter plot con el grafico del modelo lineal
d.Admissions %>%
ggplot(aes(x=`GRE Score`, y=`Chance of Admit`))+
geom_point(col="blue")+
geom_abline(slope= lm.GRE$coefficients[1], intercept= lm.GRE$coefficients[2], color="red", size=1)+
theme_gray()
lm.GRE$coefficients[1]
#7) Scatter plot con el grafico del modelo lineal
d.Admissions %>%
ggplot(aes(x=`GRE Score`, y=`Chance of Admit`))+
geom_point(col="blue")+
geom_abline(slope= lm.GRE$coefficients[2], intercept= lm.GRE$coefficients[1], color="red", size=1)+
theme_gray()
d.Admissions %>%
ggplot(aes(x=`TOEFL Score`, y=`Chance of Admit`))+
geom_point(col="blue")+
geom_abline(slope= lm.TOEFL$coefficients[2], intercept= lm.TOEFL$coefficients[1], color="red", size=1)+
theme_gray()
d.Admissions %>%
ggplot(aes(x=CGPA, y=`Chance of Admit`))+
geom_point(col="blue")+
geom_abline(slope= lm.CGPA$coefficients[2], intercept= lm.CGPA$coefficients[1], color="red", size=1)+
theme_gray()
lm.CGPA<-lm(`Chance of Admit` ~ `CGPA`, data=d.Admissions)
summary(lm.CGPA)
d.Admissions %>%
ggplot(aes(x=CGPA, y=`Chance of Admit`))+
geom_point(col="blue")+
geom_abline(slope= lm.CGPA$coefficients[2], intercept= lm.CGPA$coefficients[1], color="red", size=1)+
theme_gray()
ModeloLineal<- function(datos)
{
X<-datos[,1]
Y<-datos[,2]
#Calculo de la media de Y
Y.mean<-mean(Y)
#Calculo de la media de X
X.mean<-mean(X)
#Calculo de B1
sumaTerminos<-sum((X-X.mean)*(Y-Y.mean))
sumaCuadrada<-sum((X-X.mean)^2)
B1<-sumaTerminos/sumaCuadrada
#Calculo de Bo
Bo<-Y.mean-(B1*X.mean)
ValoresB<-c(Bo,B1)
#Obtener Y del modelo
Y.modelo<-Bo(B1*X)
#Calcular residuos
Residuo<-Y-Y.modelo
#Calculo de R
Coef.R<-cov(X,Y)/(sd(X)*sd(Y))
#Calculo de R Cuadrado
Coef.R2<-Coef.R^2
#Grafico Solicitado
plot(datos, pch=16, col="red")
points(X,Y.modelo, pc=16, col="blue", type = "l")
Salida<-list(ValoresB,Coef.R2,Coef.R,Residuo)
return(Salida)
}
ejemplo<-ModeloLineal(mtcars_data)
ModeloLineal<- function(datos)
{
X<-datos[,1]
Y<-datos[,2]
#Calculo de la media de Y
Y.mean<-mean(Y)
#Calculo de la media de X
X.mean<-mean(X)
#Calculo de B1
sumaTerminos<-sum((X-X.mean)*(Y-Y.mean))
sumaCuadrada<-sum((X-X.mean)^2)
B1<-sumaTerminos/sumaCuadrada
#Calculo de Bo
Bo<-Y.mean-(B1*X.mean)
ValoresB<-c(Bo,B1)
#Obtener Y del modelo
Y.modelo<-Bo+(B1*X)
#Calcular residuos
Residuo<-Y-Y.modelo
#Calculo de R
Coef.R<-cov(X,Y)/(sd(X)*sd(Y))
#Calculo de R Cuadrado
Coef.R2<-Coef.R^2
#Grafico Solicitado
plot(datos, pch=16, col="red")
points(X,Y.modelo, pc=16, col="blue", type = "l")
Salida<-list(ValoresB,Coef.R2,Coef.R,Residuo)
return(Salida)
}
ejemplo<-ModeloLineal(mtcars_data)
ejemplo
lm_1<-lm(mpg ~ disp, data=mtcars_data)
summary(lm_1)
d.Admissions<-read_csv("Admission_Predict_Ver1.1.csv")
View(mtcars_data)
View(mtcars_data)
Boston
install.packages("shiny")
install.packages("shinydashboard")
install.packages("reticulate")
library(reticulate)
use_python('C:\Users\ruben\AppData\Local\Continuum\anaconda3')
use_python(C:\Users\ruben\AppData\Local\Continuum\anaconda3)
use_python('C:\Users\ruben\AppData\Local\Continuum\anaconda3')
use_python('C:/Users/ruben/AppData/Local/Continuum/anaconda3')
use_python('C:/Users/ruben/AppData/Local/Continuum/anaconda3/')
library("shiny", lib.loc="C:/Users/ruben/AppData/Local/Continuum/anaconda3/envs/base (root)/lib/R/library")
library("shinydashboard", lib.loc="C:/Users/ruben/AppData/Local/Continuum/anaconda3/envs/base (root)/lib/R/library")
library(reticulate)
use_python('C:/Users/ruben/AppData/Local/Continuum/anaconda3/envs/Galileo-Python/', required = TRUE )
shiny::runApp('Algoritmos en DataScience/Proyecto_Final')
shiny::runApp('Desarrollo del producto/test_shiny')
shiny::runApp('Desarrollo del producto/test_shiny')
runApp('Desarrollo del producto/test_shiny')
runApp('Desarrollo del producto/test_shiny')
runApp('Desarrollo del producto/test_shiny')
runApp('Desarrollo del producto/test_shiny')
runApp('Desarrollo del producto/test_shiny')
runApp('Desarrollo del producto/test_shiny')
runApp('Desarrollo del producto/test_shiny')
runApp('Desarrollo del producto/test_shiny')
install.packages("lubridate")
runApp('Desarrollo del producto/test_shiny')
runApp('Desarrollo del producto/test_shiny')
runApp('Desarrollo del producto/test_shiny')
runApp('Desarrollo del producto/test_shiny')
runApp('Desarrollo del producto/test_shiny')
runApp('Desarrollo del producto/test_shiny')
runApp('Desarrollo del producto/test_shiny')
runApp('Desarrollo del producto/test_shiny')
runApp('Desarrollo del producto/test_shiny')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
